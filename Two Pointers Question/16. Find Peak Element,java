/*Leetcode 162. Find Peak Element

A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 
//TIMWe: O （log N） Space: O1)
Constraints:
1 <= nums.length <= 1000
-231 <= nums[i] <= 2^31 - 1
nums[i] != nums[i + 1] for all valid i.
*/

class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;

        //1. 数组只有一个数字
        if(n == 1){
            return 0;
        }

        //2. 数组中有两个数字，判断哪个大一些
        if(n == 2){
            if(nums[1] > nums[0]){
                return 1;
            } else{
                return 0;
            }
        }

        //3. 当数组长度大2时，找到峰值(当前数字比左右相邻数字都大)
        if(n >= 2 && nums[0] > nums[1]){
            return 0;
        } // 如果是数组的第一个数字element，只用比较其和右边的第一个数
        
        if(n >= 2 && nums[n-1] > nums[n-2]){
            return n - 1;
        } // 如果是数组的最后一个数字elemnent，只用比较其和左边的第一个数字
        
        // 其余中间部分：检查是否能找到峰值，如果没有返回-1，有则直接输出峰值对应的index
        for(int i = 1; i < n; i++){
            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]){
                return i;
            }
        }

        return -1;
    }
}
